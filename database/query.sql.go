// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createExampleContent = `-- name: CreateExampleContent :execresult
INSERT INTO example_table (title, hoge) VALUES (?, ?)
`

type CreateExampleContentParams struct {
	Title sql.NullString
	Hoge  sql.NullString
}

func (q *Queries) CreateExampleContent(ctx context.Context, arg CreateExampleContentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createExampleContent, arg.Title, arg.Hoge)
}

const exampleAll = `-- name: ExampleAll :many
SELECT id, title, hoge FROM example_table
`

func (q *Queries) ExampleAll(ctx context.Context) ([]ExampleTable, error) {
	rows, err := q.db.QueryContext(ctx, exampleAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleTable
	for rows.Next() {
		var i ExampleTable
		if err := rows.Scan(&i.ID, &i.Title, &i.Hoge); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const exampleOne = `-- name: ExampleOne :one
SELECT id, title, hoge FROM example_table LIMIT 1
`

func (q *Queries) ExampleOne(ctx context.Context) (ExampleTable, error) {
	row := q.db.QueryRowContext(ctx, exampleOne)
	var i ExampleTable
	err := row.Scan(&i.ID, &i.Title, &i.Hoge)
	return i, err
}
