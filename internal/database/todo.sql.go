// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: todo.sql

package database

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos(text, user_id) VALUES (?, ?)
`

type CreateTodoParams struct {
	Text   sql.NullString
	UserID uint32
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, arg.Text, arg.UserID)
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, text, done, user_id
FROM todos
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTodoById(ctx context.Context, id uint32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Done,
		&i.UserID,
	)
	return i, err
}

const getTodosGetAll = `-- name: GetTodosGetAll :many
SELECT id, text, done, user_id
FROM todos
`

func (q *Queries) GetTodosGetAll(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Done,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosGetByUserId = `-- name: GetTodosGetByUserId :many
SELECT id, text, done, user_id
FROM todos
WHERE user_id = ?
`

func (q *Queries) GetTodosGetByUserId(ctx context.Context, userID uint32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosGetByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Done,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
