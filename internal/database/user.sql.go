// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package database

import (
	"context"
	"strings"
)

const getUserById = `-- name: GetUserById :one
SELECT id, name
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUsersById = `-- name: GetUsersById :many
SELECT id, name
FROM users
WHERE id IN (/*SLICE:userids*/?)
`

func (q *Queries) GetUsersById(ctx context.Context, userids []uint32) ([]User, error) {
	query := getUsersById
	var queryParams []interface{}
	if len(userids) > 0 {
		for _, v := range userids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:userids*/?", strings.Repeat(",?", len(userids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:userids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
